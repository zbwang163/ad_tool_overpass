// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ad_tool_overpass

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToolServiceClient is the client API for ToolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolServiceClient interface {
	// 制作模板视频
	MakeVideoByTemplate(ctx context.Context, in *MakeVideoByTemplateRequest, opts ...grpc.CallOption) (*MakeVideoByTemplateResponse, error)
}

type toolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToolServiceClient(cc grpc.ClientConnInterface) ToolServiceClient {
	return &toolServiceClient{cc}
}

func (c *toolServiceClient) MakeVideoByTemplate(ctx context.Context, in *MakeVideoByTemplateRequest, opts ...grpc.CallOption) (*MakeVideoByTemplateResponse, error) {
	out := new(MakeVideoByTemplateResponse)
	err := c.cc.Invoke(ctx, "/ToolService/MakeVideoByTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolServiceServer is the server API for ToolService service.
// All implementations must embed UnimplementedToolServiceServer
// for forward compatibility
type ToolServiceServer interface {
	// 制作模板视频
	MakeVideoByTemplate(context.Context, *MakeVideoByTemplateRequest) (*MakeVideoByTemplateResponse, error)
	mustEmbedUnimplementedToolServiceServer()
}

// UnimplementedToolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToolServiceServer struct {
}

func (UnimplementedToolServiceServer) MakeVideoByTemplate(context.Context, *MakeVideoByTemplateRequest) (*MakeVideoByTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeVideoByTemplate not implemented")
}
func (UnimplementedToolServiceServer) mustEmbedUnimplementedToolServiceServer() {}

// UnsafeToolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolServiceServer will
// result in compilation errors.
type UnsafeToolServiceServer interface {
	mustEmbedUnimplementedToolServiceServer()
}

func RegisterToolServiceServer(s grpc.ServiceRegistrar, srv ToolServiceServer) {
	s.RegisterService(&ToolService_ServiceDesc, srv)
}

func _ToolService_MakeVideoByTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeVideoByTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).MakeVideoByTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ToolService/MakeVideoByTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).MakeVideoByTemplate(ctx, req.(*MakeVideoByTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToolService_ServiceDesc is the grpc.ServiceDesc for ToolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ToolService",
	HandlerType: (*ToolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeVideoByTemplate",
			Handler:    _ToolService_MakeVideoByTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ad_tool_overpass.proto",
}
